import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "./store";

export interface CatsState {
  error: string;
  cats: Cat[];
  status: "idle" | "loading";
}

export interface Cat {
  description: string;
  id: string;
  name: string;
  reference_image_id: string;
  // TODO add more fields from API
}

const initialState: CatsState = {
  error: "",
  cats: [],
  status: "idle",
};

// Populates our cat state with data from the API
// We use a thunk to perform our fetch async
export const fetchCats = createAsyncThunk("cats/fetchCats", async () => {
  const response = await fetch("https://api.thecatapi.com/v1/breeds");
  return await response.json();
});

// The slice contains all of our state information, reducers, actions, etc for cats
export const catSlice = createSlice({
  name: "cats",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchCats.pending, (state) => {
        state.status = "loading";
        state.error = "";
      })
      .addCase(fetchCats.fulfilled, (state, action) => {
        state.status = "idle";
        state.cats = action.payload;
      })
      .addCase(fetchCats.rejected, (state, action) => {
        state.status = "idle";
        state.error =
          "Something went wrong with the server request: " +
          new String(action.error.message);
      });
  },
});

// We export the actions generated by our slice based on our reducers
export const {} = catSlice.actions;

// Selectors let us select values from the state
export const selectCats = (state: RootState) => state.cats.cats;
export const selectError = (state: RootState) => state.cats.error;
export const selectLoading = (state: RootState) =>
  state.cats.status === "loading";

export default catSlice.reducer;
